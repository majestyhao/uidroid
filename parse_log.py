__author__ = 'Hao Fu'
# parse log generated by UiDroid

import datetime
import re
import numpy as np
import os
import pandas as pd

def diff_times_in_seconds(t1, t2):
    # caveat emptor - assumes t1 & t2 are python times, on the same day and t2 is after t1
    h1, m1, s1 = t1.hour, t1.minute, t1.second
    h2, m2, s2 = t2.hour, t2.minute, t2.second
    t1_secs = s1 + 60 * (m1 + 60 * h1)
    t2_secs = s2 + 60 * (m2 + 60 * h2)
    return t2_secs - t1_secs

def get_pid_uid(console_lines, pkg_name):
    # read the console file and extract pid, uid from ps and cat xx based on pkg name
    ps_pattern = re.compile(r'.*?USER     PID.*?')
    pkg_list_pattern = re.compile(r'.*?\[\'com.*?')
    pkg_name_pattern = re.compile(r'.*?' + pkg_name + '.*?')
    pid = 0
    uid = 0
    for line in console_lines:
        if ps_pattern.match(line):
            line = line.split(',')
            for sub_ps in line:
                if pkg_name_pattern.match(sub_ps):
                    pid = sub_ps.split('    ')[1]
                    pid = pid.split(' ')[0]
                    print sub_ps
                    print pid
        elif pkg_list_pattern.match(line):
            line = line.split(',')
            for sub_pl in line:
                if pkg_name_pattern.match(sub_pl):
                    uid = sub_pl.split(' ')[2]
                    print sub_pl
                    print uid

    return [pid, uid]

def filter_lines(console_lines, log_lines, pid, uid, pkg_name):
    global data
    # filter log by pkg name, pid and uid
    content_provider_pattern = re.compile(r'.*?ContentProvider.*?uid=(.*?)')
    system_out_pattern = re.compile(r'.*?System.out.*?')
    activity_manager_service_pattern = re.compile(r'.*?ActivityManagerService.*?')
    contextimpl_pattern = re.compile('.*?UiDroid_ContextImpl.*?')
    taint_pattern = re.compile('.*?Taint.*?')
    broadcast_intent_pattern = re.compile(r'.*?broadcastIntent.*?')
    activity_manager_native_pattern = re.compile('.*?ActivityManagerNative.*?')
    package_manager_pattern = re.compile(r'.*?PackageManager.*?')
    check_uid_permi_pattern = re.compile(r'.*?checkUidPermission, uid=(.*?),.*?')
    perform_pattern = re.compile(r'.*?performButton.*?')
    click_pattern = re.compile(r'.*?- click.*?')
    prior_line = ''
    rawdata_list = []
    tmpdata = []
    # if data is empty: first scan log
    if len(data) == 0:
        row_data = np.zeros((1, 2), dtype=basestring)
        row_data[0, 0] = pkg_name + '/front_page'
        data = row_data
        #print data
    else:
        row_data = np.zeros((1, data.shape[1]), dtype=basestring)
        row_data[0, 0] = pkg_name + '/front_page'
        data = np.append(data, row_data, 0)

    for log_line in log_lines:
        check_uid_permi_match = check_uid_permi_pattern.match(log_line)
        content_provider_pattern_match = content_provider_pattern.match(log_line)

        if perform_pattern.match(log_line):
            log_line = log_line.split('   ')
            log_line_time = log_line[0].split(' ')[1]
            log_line_time = log_line_time.split('.')[0]


            #print data.shape
            #print data
            if tmpdata and tmpdata not in rawdata_list:
                print 'ca  ' + str(tmpdata)
                rawdata_list.append(tmpdata)
            elif tmpdata:
                print 'ka  ' + str(tmpdata)
                data = np.delete(data, (data.shape[0] - 1), 0)  # delete a repeate row
            print '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.>>'
            tmpdata = []
            row_data = np.zeros((1, data.shape[1]), dtype=basestring)
            print log_line
            prior_line = ''
            for i in range(len(console_lines)):
                line = console_lines[i]
                if click_pattern.match(line):
                    # "adb logcat -v threadtime" - Display the date, invocation time, priority, tag,
                    #  and the PID and TID of the thread issuing the message.
                    line = line.split('   ')
                    line_time = line[0].split(' ')[1]
                    line_time = line_time.split(',')[0]
                    diff_time = diff_times_in_seconds(datetime.datetime.strptime(log_line_time, '%H:%M:%S').time(),
                                                  datetime.datetime.strptime(line_time, '%H:%M:%S').time())
                    #if abs(diff_time) < 10:
                    if diff_time < 5 and diff_time >= 0:
                        #print diff_time
                        #print line
                        j = i - 1
                        while not re.search('screen shot at', console_lines[j]):
                            j -= 1
                        print console_lines[j]
                        row_data[0, 0] = pkg_name + '/' + console_lines[j].split('at ')[1]
                        print line


                        print console_lines[i + 1]
                        line = console_lines[i + 1].split(' - ')
                        #print line
                        try:
                            line = eval(line[len(line) - 1])
                        except:
                            print line
                            print line[len(line) - 1]
                            #exit(1)
                        wordlist = []
                        for chars in line:
                            if not isinstance(chars, basestring) or re.search('android', chars) or re.search('/', chars):
                                continue
                            try:
                                chars = chars.split('/')[1]
                            except:
                                pass
                            chars = re.sub('[^a-zA-Z]', ' ', chars)
                            words = chars.lower().split()
                            if words:
                                if len(words) <= 5:
                                    for word in words:
                                        if word not in wordlist:
                                            wordlist.append(word)
                        if wordlist:
                            keywords = ' '.join(wordlist)
                            #print row_data
                            row_data[0, 1] = keywords
                            print ' '.join(wordlist)
                            data = np.append(data, row_data, 0)
                            tmpdata.append(keywords)
        elif check_uid_permi_match:
            # if is check uid permisson
            tuid = check_uid_permi_match.group(0)
            if tuid == uid:
                print log_line
        elif activity_manager_native_pattern.match(log_line):
             # permisson
             if re.search(pid, log_line):
                 if re.search('Permission', log_line):
                     try:
                        log_line = log_line.split('\n')[0].split('permission=')[1]
                     except:
                         print log_line
                         continue
                     if log_line != prior_line:
                        print log_line
                        prior_line = log_line
                        tmpdata.append(log_line)
                        if log_line not in permission_list:
                            permission_list.append(log_line)
                            tmp = np.zeros((data.shape[0], 1), dtype=basestring)
                            data = np.append(data, tmp, 1)
                            data[data.shape[0] - 1, data.shape[1] - 1] = 1
                            #print data
                        else:
                            ind = permission_list.index(log_line)
                            # map between permission_list and data mat
                            data[data.shape[0] - 1, ind] = 1

                            #print data
        # elif broadcast_intent_pattern.match(log_line):
        #     if re.search(pkg_name, log_line):
        #         print log_line
        # elif taint_pattern.match(log_line):
        #     if re.search(pkg_name, log_line):
        #         print log_line
        # elif contextimpl_pattern.match(log_line):
        #     if re.search(pkg_name, log_line) or re.search(pid, log_line):
        #         print log_line
        # elif activity_manager_service_pattern.match(log_line):
        #     if re.findall(pkg_name, log_line):
        #         print log_line
        # elif system_out_pattern.match(log_line):
        #  # show access not-my-self dir access
        #     if re.findall(pid, log_line) and not re.search(pkg_name, log_line):
        #         print log_line
        # elif content_provider_pattern_match:
        #     if re.search(uid, log_line):
        #         print log_line
        # elif package_manager_pattern.match(log_line):
        #     if re.search(pkg_name, log_line):
        #         print log_line
    if tmpdata and tmpdata not in rawdata_list:
        print 'ca  ' + str(tmpdata)
        rawdata_list.append(tmpdata)
    elif tmpdata:
        print 'ka  ' + str(tmpdata)
        data = np.delete(data, (data.shape[0] - 1), 0)  # delete a repeate row


def get_data(console_lines, log_lines, pkg_name):
    [pid, uid] = get_pid_uid(console_lines, pkg_name)
    if pid != 0 and uid != 0:
        filter_lines(console_lines, log_lines, pid, uid, pkg_name)

def visit(arg, dirname, files):
    dirname = dirname.replace('\\', '/')
    for file in files:
        #print file, dirname
        if re.search('\.log$', file) and not re.search('Console', file):
            log_file = open(dirname + '/' + file, 'r')
            log_lines = log_file.readlines()
            pkg_name = dirname.split('/')
            pkg_name = pkg_name[len(pkg_name) - 1].split('0')[0]
            try:
                console_file = open(dirname + '/' + 'UiDroid-Console.log', 'r')
                console_lines = console_file.readlines()
            except:
                continue
            get_data(console_lines, log_lines, pkg_name)



permission_list = ['file', 'simple_keyword']
data = []
dir = 'F:/UiDroid/'
os.path.walk(dir, visit, None)
df = pd.DataFrame(data, columns=permission_list)
os.remove('simple_keyword.csv')
df.to_csv('simple_keyword.csv', header=True, sep=',')
print data



